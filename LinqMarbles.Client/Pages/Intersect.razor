@page "/intersect"
<PageTitle>LINQ Marbles - Intersect</PageTitle>

<PageContainer OperatorText="Intersect()">
    <InputPanel>
        <div class="array">
            @foreach (var marble in _marbles1)
            {
                <Marble Color="@marble.Color"
                Close="@(() => _marbles1.Remove(marble))">
                    @marble.Number
                </Marble>
            }
            <AddMarble DefaultContent="5" OnAdd="AddNumberToFirstList" T="int" />
        </div>
        <div class="array">
            @foreach (var marble in _marbles2)
            {
                <Marble Color="@marble.Color"
                Close="@(() => _marbles2.Remove(marble))">
                    @marble.Number
                </Marble>
            }
            <AddMarble DefaultContent="5" OnAdd="AddNumberToSecondList" T="int" />
        </div>
    </InputPanel>
    <OutputPanel>
        @foreach (var marble in _marbles1.Intersect(_marbles2))
        {
            <Marble Color="@marble.Color">@marble.Number</Marble>
        }
    </OutputPanel>
</PageContainer>

@code {
    [CascadingParameter] GlobalObject? _globalObject { get; set; }

    string _unitedColor = "";
    private List<MarbleNumberModel> _marbles1 = new();
    private List<MarbleNumberModel> _marbles2 = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _unitedColor = ColorsHelper.GetRandomColor(_globalObject);

        _marbles1 = new()
        {
            new(1, _globalObject) { Color = _unitedColor },
            new(3, _globalObject) { Color = _unitedColor },
        };

        _marbles2 = new()
        {
            new(1, _globalObject) { Color = _unitedColor },
        };
    }

    private void AddNumberToFirstList(int number)
    {
        _marbles1.Add(new MarbleNumberModel(number, _globalObject) { Color = _unitedColor });
    }
    
    private void AddNumberToSecondList(int number)
    {
        _marbles2.Add(new MarbleNumberModel(number, _globalObject) { Color = _unitedColor });
    }
}
