@page "/zip"
<PageTitle>LINQ Marbles - Zip</PageTitle>

<PageContainer>
    <OperatorPanel>
        <MudText Typo="Typo.h6" Style="text-align: left" Class="function">
            Zip(
            <br />&nbsp;&nbsp;marbles2, 
            <br />&nbsp;&nbsp;(item1, item2) => new 
            <br />&nbsp;&nbsp;{ 
            <br />&nbsp;&nbsp;&nbsp;&nbsp;Number = $"{item1.Number}:{item2.Number}",
            <br />&nbsp;&nbsp;&nbsp;&nbsp;Letter = item1.Letter + item2.Letter
            <br />&nbsp;&nbsp;}
            <br />)
        </MudText>

    </OperatorPanel>
    <InputPanel>
        <div class="array">
            @foreach (var marble in _marbles1)
            {
                <Marble Color="@marble.Color"
                        Close="@(() => _marbles1.Remove(marble))">
                    @marble.Number,@marble.Content
                </Marble>
            }
            <AddMarble DefaultContent='"1,A"' OnAdd="AddNewContentToList1" T="string"/>
        </div>
        <div class="array">
            @foreach (var marble in _marbles2)
            {
                <Marble Color="@marble.Color">@marble.Number,@marble.Content</Marble>
            }
            <AddMarble DefaultContent='"1,B"' OnAdd="AddNewContentToList2" T="string"/>
        </div>
    </InputPanel>
    <OutputPanel>
        @foreach (var zipped in _marbles1.Zip(
            _marbles2,
            (item1, item2) => new
            {
                Number = $"{item1.Number}:{item2.Number}",
                item1.Color,
                Content = item1.Content + item2.Content
            }))
        {
            <Marble Color="@zipped.Color">@zipped.Number,@zipped.Content</Marble>
        }
    </OutputPanel>
</PageContainer>

@code {
    [CascadingParameter] GlobalObject? _globalObject { get; set; }

    private List<MarbleMultiModel> _marbles1 = new();
    private List<MarbleMultiModel> _marbles2 = new();

    protected override void OnInitialized()
    {
        _marbles1 = new()
        {
            new(1, "A", _globalObject),
            new(2, "D", _globalObject),
        };

        _marbles2 = new()
        {
            new(3, "C", _globalObject),
        };
    }
    
    private void AddNewContentToList1(string input)
    {
        var split = input.Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
        if (split.Length != 2)
        {
            return;
        }
        
        var number = int.Parse(split[0]);
        var content = split[1];
        
        _marbles1.Add(new MarbleMultiModel(number, content, _globalObject));
    }
    
    private void AddNewContentToList2(string input)
    {
        var split = input.Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
        if (split.Length != 2)
        {
            return;
        }
        
        var number = int.Parse(split[0]);
        var content = split[1];
        
        _marbles2.Add(new MarbleMultiModel(number, content, _globalObject));
    }
}
